# This is a basic workflow to help you get started with Actions

name: Deploy DEV EMBED

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
  push:
    branches:
      - next
      - main
    paths:
      - 'libs/embed/**'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  deploy_embed:
    environment: Development
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    timeout-minutes: 80
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-project

      # Runs a single command using the runners shell
      - name: Build
        run: CI='' npm run build:embed

      - name: Build
        working-directory: libs/embed
        run: CI='' npm run build:dev

      - name: Deploy EMBED to DEV
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: libs/embed/dist
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: dev
          production-deploy: true
          alias: dev
          github-deployment-environment: development
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: 22682666-3a8d-40be-af26-017bfadf5ae9
        timeout-minutes: 1

      - name: Remove build outputs
        working-directory: libs/embed
        run: rm -rf dist

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          REGISTRY_OWNER: novuhq
          DOCKER_NAME: novu/embed
          IMAGE_TAG: ${{ github.sha }}
          GH_ACTOR: ${{ github.actor }}
          GH_PASSWORD: ${{ secrets.GH_PACKAGES }}
        run: |
          echo $GH_PASSWORD | docker login ghcr.io -u $GH_ACTOR --password-stdin 
          docker build -t ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$IMAGE_TAG -f libs/embed/Dockerfile .
          docker tag ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$IMAGE_TAG ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:dev
          docker push ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:dev
          docker push ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$IMAGE_TAG
          echo "IMAGE=ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT
