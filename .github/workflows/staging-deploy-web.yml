# This is a basic workflow to help you get started with Actions

name: Deploy Staging WEB

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
  push:
    branches:
      - next
      - main
    paths:
      - 'apps/web/**'
      - 'libs/shared/**'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test_web:
    uses: ./.github/workflows/reusable-web-e2e.yml
    with:
      submodules: true
    secrets: inherit

  # This workflow contains a single job called "build"
  deploy_web:
    needs: test_web
    environment: Development
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    timeout-minutes: 80
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-project

      - name: Build
        run: CI='' pnpm build:web

      - name: Create env file
        working-directory: apps/web
        run: |
          touch .env
          echo REACT_APP_API_URL="https://staging.api.novu.co" >> .env
          echo REACT_APP_WS_URL="https://staging.ws.novu.co" >> .env
          echo REACT_APP_WEBHOOK_URL="https://staging.webhook.novu.co" >> .env
          echo REACT_APP_WIDGET_EMBED_PATH="https://staging.embed.novu.co/embed.umd.min.js" >> .env
          echo REACT_APP_NOVU_APP_ID=${{ secrets.NOVU_APP_ID }} >> .env
          echo REACT_APP_SEGMENT_KEY=${{ secrets.WEB_SEGMENT_KEY }} >> .env
          echo REACT_APP_SENTRY_DSN="https://8054d521cff2e73d32b8edfe4793d05c@o1161119.ingest.sentry.io/4505829158158336" >> .env
          echo REACT_APP_ENVIRONMENT=staging >> .env
          echo REACT_APP_MAIL_SERVER_DOMAIN="staging.inbound-mail.novu.co" >> .env
          echo REACT_APP_LAUNCH_DARKLY_CLIENT_SIDE_ID=${{ secrets.DEV_LAUNCH_DARKLY_CLIENT_SIDE_ID }} >> .env

      - name: Envsetup
        working-directory: apps/web
        run: npm run envsetup

      # Runs a single command using the runners shell
      - name: Build
        env:
          REACT_APP_SEGMENT_KEY: ${{ secrets.WEB_SEGMENT_KEY }}
          REACT_APP_INTERCOM_APP_ID: ${{ secrets.INTERCOM_APP_ID }}
          REACT_APP_API_URL: https://staging.api.novu.co
          REACT_APP_WS_URL: https://staging.ws.novu.co
          REACT_APP_WEBHOOK_URL: https://staging.webhook.novu.co
          REACT_APP_WIDGET_EMBED_PATH: https://staging.embed.novu.co/embed.umd.min.js
          REACT_APP_NOVU_APP_ID: ${{ secrets.NOVU_APP_ID }}
          REACT_APP_SENTRY_DSN: https://8054d521cff2e73d32b8edfe4793d05c@o1161119.ingest.sentry.io/4505829158158336
          REACT_APP_ENVIRONMENT: staging
          REACT_APP_MAIL_SERVER_DOMAIN: staging.inbound-mail.novu.co
          REACT_APP_LAUNCH_DARKLY_CLIENT_SIDE_ID: ${{ secrets.DEV_LAUNCH_DARKLY_CLIENT_SIDE_ID }}
        working-directory: apps/web
        run: npm run build

      - name: Deploy WEB to Staging
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: apps/web/build
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: Staging deployment
          production-deploy: true
          alias: dev
          github-deployment-environment: staging
          github-deployment-description: Web Deployment
          netlify-config-path: apps/web/netlify.toml
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: 8010b875-9f6e-4bcc-ba67-c090c1cc2e05
        timeout-minutes: 1

      - name: Setup Depot
        uses: depot/setup-action@v1
        with:
          oidc: true

      - name: Remove build outputs
        working-directory: apps/web
        run: rm -rf build

      - name: Build, tag, and push image to ghcr.io
        id: build-image
        env:
          REGISTRY_OWNER: novuhq
          DOCKER_NAME: novu/web
          IMAGE_TAG: ${{ github.sha }}
          GH_ACTOR: ${{ github.actor }}
          GH_PASSWORD: ${{ secrets.GH_PACKAGES }}
          DEPOT_PROJECT_ID: f88777ff6m
        run: |
          echo $GH_PASSWORD | docker login ghcr.io -u $GH_ACTOR --password-stdin
          depot build --push \
            -t ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$IMAGE_TAG \
            -t ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:dev \
            -f apps/web/Dockerfile .
          echo "IMAGE=ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: apps/web/cypress/screenshots
